<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

	<context:property-placeholder ignore-resource-not-found="true" location="classpath*:META-INF/spring/application.properties,classpath*:META-INF/spring/database.properties,classpath*:META-INF/spring/world-flora-harvest.properties,classpath*:META-INF/spring/world-flora-harvest-db.properties"/>
	<context:annotation-config />

	<batch:job id="DarwinCoreArchiveHarvesting">
		<batch:description>Gets a Darwin Core Archive from a web-accessible URI, unpacks it in a local folder, reads the metadata, then imports the content</batch:description>
		<batch:step id="setTemporaryFilenames">
			<batch:description>Set the temporary file names</batch:description>
			<batch:tasklet ref="setTemporaryFilenamesTasklet" />
			<batch:next on="COMPLETED" to="getDWCArchive" />
			<batch:listeners>
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="getDWCArchive">
			<batch:description>Get the darwin core archive</batch:description>
			<batch:tasklet ref="getDWCArchiveTasklet" />
			<batch:next on="NOT_MODIFIED" to="cleanupResourcesNotModified" />
			<batch:next on="COMPLETED" to="unpackDWCArchive" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="cleanupResourcesNotModified">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="dwcArchiveResourceDeletingTasklet" />
			<batch:end on="COMPLETED" exit-code="NOT_MODIFIED" />
			<batch:listeners>
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="unpackDWCArchive">
			<batch:description>Unzip the archive to a temporary directory</batch:description>
			<batch:tasklet ref="unpackDWCArchiveTasklet" />
			<batch:next on="COMPLETED" to="readArchiveMetadata" />
			<batch:listeners>
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="readArchiveMetadata">
			<batch:description>Read the metadata from the archive and figure out how to interpret the files</batch:description>
			<batch:tasklet ref="readDWCArchiveMetadataTasklet" />
			<batch:next on="COMPLETED" to="checkTaxonProcessingMode" />
			<batch:listeners>
				<batch:listener ref="dwcArchiveMetadataReader" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="taxonProcessingModeDecider" id="checkTaxonProcessingMode">
			<batch:next on="CHECK_TAXA" to="markTaxonRecords" />
			<batch:next on="IMPORT_TAXA" to="markTaxonRecordsForImport" />
			<batch:next on="IMPORT_TAXA_BY_AUTHORITY" to="markTaxonRecordsByAuthorityForImport" />
            <batch:next on="SKIP_TAXA" to="markTaxonRecordsForSkipping" />
            <batch:next on="SKIP_WITH_ERROR" to="checkDescriptionProcessingMode" />
		</batch:decision>
		<batch:step id="markTaxonRecordsForSkipping">
			<batch:description>Mark the taxon records we expect to be present in this archive</batch:description>
			<batch:tasklet ref="markTaxonRecordsForSkippingTasklet" />
			<batch:next on="COMPLETED" to="skipCoreFile" />
			<batch:listeners>
				<batch:listener ref="markTaxonRecordsForSkippingTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markTaxonRecords">
			<batch:description>Mark the taxon records we expect to be present in this archive</batch:description>
			<batch:tasklet ref="markTaxonRecordsForCheckingTasklet" />
			<batch:next on="COMPLETED" to="checkCoreFile" />
			<batch:listeners>
				<batch:listener ref="markTaxonRecordsForCheckingTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="checkCoreFile">
			<batch:description>Process the core file containing the taxa but only check the taxa, don't modify or create taxa</batch:description>
			<batch:tasklet>
				<batch:chunk reader="taxonReader" processor="taxonCheckingProcessor" writer="itemWriter" commit-interval="10" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkDescriptionProcessingMode" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="taxonFieldSetMapper" />
				<batch:listener ref="stepStatusListener" />				
			</batch:listeners>
		</batch:step>
		<batch:step id="skipCoreFile">
			<batch:description>Process the core file containing the taxa but only check the taxa, don't modify or create taxa</batch:description>
			<batch:tasklet>
				<batch:chunk reader="taxonReader" processor="taxonSkippingProcessor"
					writer="itemWriter" commit-interval="10" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkDescriptionProcessingMode" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
			    <batch:listener ref="taxonSkippingProcessor" />
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="taxonFieldSetMapper" />
				<batch:listener ref="stepStatusListener" />				
			</batch:listeners>
		</batch:step>
		<batch:step id="markTaxonRecordsForImport">
			<batch:description>Mark the taxon records we expect to be present in this archive</batch:description>
			<batch:tasklet ref="markTaxonRecordsForImportTasklet" />
			<batch:next on="COMPLETED" to="importCoreFile" />
			<batch:listeners>
				<batch:listener ref="markTaxonRecordsForImportTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markTaxonRecordsByAuthorityForImport">
			<batch:description>Mark the taxon records we expect to be present in this archive</batch:description>
			<batch:tasklet ref="markTaxonRecordsByAuthorityTasklet" />
			<batch:next on="COMPLETED" to="importCoreFile" />
			<batch:listeners>
				<batch:listener ref="markTaxonRecordsByAuthorityTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="importCoreFile">
			<batch:description>Process the core file containing the taxa, creating and modifying where neccessary</batch:description>
			<batch:tasklet>
				<batch:chunk reader="taxonReader" processor="taxonImportingProcessor" writer="itemWriter" commit-interval="10" skip-limit="10000">
				  <batch:skippable-exception-classes>
						<batch:include class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentTaxa" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="taxonFieldSetMapper" />
				<batch:listener ref="taxonImportingProcessor" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentTaxa">
		  <batch:description>Delete the taxa which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
				<batch:chunk reader="deleteTaxaReader"	writer="taxonDeletingWriter" commit-interval="100"/>				    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkDescriptionProcessingMode" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="descriptionProcessingModeDecider" id="checkDescriptionProcessingMode">
			<batch:next on="IMPORT_DESCRIPTIONS" to="markDescriptionRecords" />
			<batch:next on="IMPORT_DESCRIPTIONS_DONT_DELETE_GLOBAL" to="markRelatedDescriptionRecords" />
            <batch:next on="SKIP_DESCRIPTIONS" to="checkTermProcessingMode" />
            <batch:next on="SKIP_WITH_ERROR" to="checkTermProcessingMode" />
		</batch:decision>
		<batch:step id="markDescriptionRecords">
			<batch:description>Mark the description records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markDescriptionRecordsTasklet" />
			<batch:next on="COMPLETED" to="processDescriptionDecision" />
			<batch:listeners>
				<batch:listener ref="markDescriptionRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markRelatedDescriptionRecords">
			<batch:description>Mark the description records we expect to be present in this archive (based on what we have previously harvested), don't delete global records</batch:description>
			<batch:tasklet ref="markRelatedDescriptionRecordsTasklet" />
			<batch:next on="COMPLETED" to="processDescriptionDecision" />
			<batch:listeners>
				<batch:listener ref="markRelatedDescriptionRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processDescriptionDecider" id="processDescriptionDecision">
			<batch:next on="true" to="processDescriptionFile" />
			<batch:next on="false" to="deleteAbsentDescriptions" />
		</batch:decision>
		<batch:step id="processDescriptionFile">
			<batch:description>Process the extension file containing the descriptions</batch:description>
			<batch:tasklet>
				<batch:chunk reader="descriptionReader" processor="descriptionProcessor" writer="itemWriter" commit-interval="10" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include
							class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include
							class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentDescriptions" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="descriptionFieldSetMapper" />
				<batch:listener ref="descriptionProcessor" />
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentDescriptions">
			<batch:description>Delete the descriptions which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
				<batch:chunk reader="deleteDescriptionsReader" writer="deletingWriter"	commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkTermProcessingMode" />
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="termProcessingModeDecider" id="checkTermProcessingMode">
			<batch:next on="IMPORT_TERMS" to="markTermRecords" />
			<batch:next on="IMPORT_TERMS_DONT_DELETE_GLOBAL" to="markRelatedTermRecords" />
            <batch:next on="SKIP_TERMS" to="checkImageProcessingMode" />
            <batch:next on="SKIP_WITH_ERROR" to="checkImageProcessingMode" />
		</batch:decision>
		<batch:step id="markTermRecords">
			<batch:description>Mark the term records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markTermRecordsTasklet" />
			<batch:next on="COMPLETED" to="processTermsDecision" />
			<batch:listeners>
				<batch:listener ref="markTermRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markRelatedTermRecords">
			<batch:description>Mark the term records we expect to be present in this archive (based on what we have previously harvested) but don't delete keys which are not associate with a taxon</batch:description>
			<batch:tasklet ref="markRelatedTermRecordsTasklet" />
			<batch:next on="COMPLETED" to="processTermsDecision" />
			<batch:listeners>
				<batch:listener ref="markRelatedTermRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processTermsDecider" id="processTermsDecision">
			<batch:next on="true" to="processTermFile" />
			<batch:next on="false" to="deleteAbsentTerms" />
		</batch:decision>
		<batch:step id="processTermFile">
			<batch:description>Process the extension file containing the terms</batch:description>
			<batch:tasklet>
				<batch:chunk reader="termReader" processor="termProcessor" writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include	class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include	class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentTerms" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="termFieldSetMapper" />
				<batch:listener ref="termProcessor" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentTerms">
			<batch:description>Delete the terms which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
                <batch:chunk reader="deleteTermsReader" writer="deletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="indexTerms" />
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="indexTerms">
		  <batch:description>Index the terms associated with this job</batch:description>
		  <batch:tasklet>
				<batch:chunk reader="indexTermsReader" writer="indexTermsWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkImageProcessingMode" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="imageProcessingModeDecider" id="checkImageProcessingMode">
			<batch:next on="IMPORT_IMAGES" to="markImageRecords" />
			<batch:next on="IMPORT_IMAGES_DONT_DELETE_GLOBAL" to="markRelatedImageRecords" />
            <batch:next on="SKIP_IMAGES" to="checkKeyProcessingMode" />
            <batch:next on="SKIP_WITH_ERROR" to="checkKeyProcessingMode" />
		</batch:decision>
		<batch:step id="markImageRecords">
			<batch:description>Mark the image records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markImageRecordsTasklet" />
			<batch:next on="COMPLETED" to="processImagesDecision" />
			<batch:listeners>
				<batch:listener ref="markImageRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markRelatedImageRecords">
			<batch:description>Mark the image records we expect to be present in this archive (based on what we have previously harvested) but don't delete images which are not associate with a taxon</batch:description>
			<batch:tasklet ref="markRelatedImageRecordsTasklet" />
			<batch:next on="COMPLETED" to="processImagesDecision" />
			<batch:listeners>
				<batch:listener ref="markRelatedImageRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processImageDecider" id="processImagesDecision">
			<batch:next on="true" to="processImageFile" />
			<batch:next on="false" to="deleteAbsentImages" />
		</batch:decision>
		<batch:step id="processImageFile">
			<batch:description>Process the extension file containing the images</batch:description>
			<batch:tasklet>
				<batch:chunk reader="imageReader" processor="imageProcessor" writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include	class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include	class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="handleBinaryImages" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="imageFieldSetMapper" />
				<batch:listener ref="imageProcessor" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="handleBinaryImages">
			<batch:description>Retrieve images which are not cached, obtain EXIF metadata from the binary files
			  then resize the images
			</batch:description>
			<batch:tasklet>
				<batch:chunk reader="processImageFilesReader" processor="processImageFilesProcessor" writer="itemWriter" commit-interval="10" skip-limit="100">
					<batch:skippable-exception-classes>
						<batch:include class="org.apache.sanselan.ImageReadException" />
						<batch:include	class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />				
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentImages" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			    <batch:listener ref="processingExceptionProcessListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentImages">
			<batch:description>Delete the images which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
                <batch:chunk reader="deleteImagesReader" writer="imageDeletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="indexImages" />
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="indexImages">
		  <batch:description>Index the images associated with this job</batch:description>
		  <batch:tasklet>
				<batch:chunk reader="indexImagesReader" writer="indexImagesWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkKeyProcessingMode" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="keyProcessingModeDecider" id="checkKeyProcessingMode">
			<batch:next on="IMPORT_KEYS" to="markKeyRecords" />
			<batch:next on="IMPORT_KEYS_DONT_DELETE_GLOBAL" to="markRelatedKeyRecords" />
            <batch:next on="SKIP_KEYS" to="checkPhylogenyProcessingMode" />
            <batch:next on="SKIP_WITH_ERROR" to="checkPhylogenyProcessingMode" />
		</batch:decision>
		<batch:step id="markKeyRecords">
			<batch:description>Mark the identification key records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markKeyRecordsTasklet" />
			<batch:next on="COMPLETED" to="processKeysDecision" />
			<batch:listeners>
				<batch:listener ref="markKeyRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markRelatedKeyRecords">
			<batch:description>Mark the key records we expect to be present in this archive (based on what we have previously harvested) but don't delete keys which are not associate with a taxon</batch:description>
			<batch:tasklet ref="markRelatedKeyRecordsTasklet" />
			<batch:next on="COMPLETED" to="processKeysDecision" />
			<batch:listeners>
				<batch:listener ref="markRelatedKeyRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processKeysDecider" id="processKeysDecision">
			<batch:next on="true" to="processKeyFile" />
			<batch:next on="false" to="deleteAbsentKeys" />
		</batch:decision>
		<batch:step id="processKeyFile">
			<batch:description>Process the extension file containing the identification keys</batch:description>
			<batch:tasklet>
				<batch:chunk reader="keyReader" processor="keyProcessor" writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include	class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include	class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentKeys" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="imageFieldSetMapper" />
				<batch:listener ref="keyProcessor" />
				<batch:listener ref="keyProcessorDelegate" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentKeys">
			<batch:description>Delete the identification keys which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
                <batch:chunk reader="deleteKeysReader" writer="deletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="indexKeys" />
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="indexKeys">
		  <batch:description>Index the images associated with this job</batch:description>
		  <batch:tasklet>
				<batch:chunk reader="indexKeysReader" writer="indexKeysWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkPhylogenyProcessingMode" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="phylogenyProcessingModeDecider" id="checkPhylogenyProcessingMode">
			<batch:next on="IMPORT_PHYLOGENIES" to="markPhylogenyRecords" />
			<batch:next on="IMPORT_PHYLOGENIES_DONT_DELETE_GLOBAL" to="markRelatedPhylogenyRecords" />
            <batch:next on="SKIP_PHYLOGENIES" to="checkReferenceProcessingMode" />
            <batch:next on="SKIP_WITH_ERROR" to="checkReferenceProcessingMode" />
		</batch:decision>
		<batch:step id="markPhylogenyRecords">
			<batch:description>Mark the phylogeny records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markPhylogenyRecordsTasklet" />
			<batch:next on="COMPLETED" to="processPhylogeniesDecision" />
			<batch:listeners>
				<batch:listener ref="markPhylogenyRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markRelatedPhylogenyRecords">
			<batch:description>Mark the phylogeny records we expect to be present in this archive (based on what we have previously harvested) but don't delete phylogenies which are not associate with a taxon</batch:description>
			<batch:tasklet ref="markRelatedPhylogenyRecordsTasklet" />
			<batch:next on="COMPLETED" to="processPhylogeniesDecision" />
			<batch:listeners>
				<batch:listener ref="markRelatedPhylogenyRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processPhylogeniesDecider" id="processPhylogeniesDecision">
			<batch:next on="true" to="processPhylogenyFile" />
			<batch:next on="false" to="deleteAbsentPhylogenies" />
		</batch:decision>
		<batch:step id="processPhylogenyFile">
			<batch:description>Process the extension file containing the phylogenies</batch:description>
			<batch:tasklet>
				<batch:chunk reader="phylogenyReader" processor="phylogenyProcessor" writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include	class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include	class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentPhylogenies" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="imageFieldSetMapper" />
				<batch:listener ref="phylogenyProcessor" />
				<batch:listener ref="phylogenyProcessorDelegate" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentPhylogenies">
			<batch:description>Delete the phylogenies which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
                <batch:chunk reader="deletePhylogeniesReader" writer="deletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="indexPhylogenies" />
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="indexPhylogenies">
		  <batch:description>Index the phylogenies associated with this job</batch:description>
		  <batch:tasklet>
				<batch:chunk reader="indexPhylogeniesReader" writer="indexPhylogeniesWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkReferenceProcessingMode" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="referenceProcessingModeDecider" id="checkReferenceProcessingMode">
			<batch:next on="IMPORT_REFERENCES" to="markReferenceRecords" />
			<batch:next on="IMPORT_REFERENCES_DONT_DELETE_GLOBAL" to="markRelatedReferenceRecords" />
            <batch:next on="SKIP_REFERENCES" to="checkIdentifierProcessingMode" />
            <batch:next on="SKIP_WITH_ERROR" to="checkIdentifierProcessingMode" />
		</batch:decision>
		<batch:step id="markReferenceRecords">
			<batch:description>Mark the reference records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markReferenceRecordsTasklet" />
			<batch:next on="COMPLETED" to="processReferencesDecision" />
			<batch:listeners>
				<batch:listener ref="markReferenceRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markRelatedReferenceRecords">
			<batch:description>Mark the reference records we expect to be present in this archive (based on what we have previously harvested) but don't delete references which are not associate with a taxon</batch:description>
			<batch:tasklet ref="markRelatedReferenceRecordsTasklet" />
			<batch:next on="COMPLETED" to="processReferencesDecision" />
			<batch:listeners>
				<batch:listener ref="markRelatedReferenceRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processReferenceDecider" id="processReferencesDecision">
			<batch:next on="true" to="processReferenceFile" />
			<batch:next on="false" to="deleteAbsentReferences" />
		</batch:decision>
		<batch:step id="processReferenceFile">
			<batch:description>Process the extension file containing the references</batch:description>
			<batch:tasklet>
				<batch:chunk reader="referenceReader" processor="referenceProcessor" writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentReferences" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="referenceFieldSetMapper" />
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="referenceProcessor" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentReferences">
			<batch:description>Delete the references which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
				<batch:chunk reader="deleteReferencesReader" writer="deletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkIdentifierProcessingMode" />
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="identifierProcessingModeDecider" id="checkIdentifierProcessingMode">
			<batch:next on="IMPORT_IDENTIFIERS" to="markIdentifierRecords" />
			<batch:next on="IMPORT_IDENTIFIERS_DONT_DELETE_GLOBAL" to="markRelatedIdentifierRecords" />
            <batch:next on="SKIP_IDENTIFIERS" to="checkDistributionProcessingMode" />
            <batch:next on="SKIP_WITH_ERROR" to="checkDistributionProcessingMode" />
		</batch:decision>
		<batch:step id="markIdentifierRecords">
			<batch:description>Mark the identifier records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markIdentifierRecordsTasklet" />
			<batch:next on="COMPLETED" to="processIdentifiersDecision" />
			<batch:listeners>
				<batch:listener ref="markIdentifierRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markRelatedIdentifierRecords">
			<batch:description>Mark the identifier records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markRelatedIdentifierRecordsTasklet" />
			<batch:next on="COMPLETED" to="processIdentifiersDecision" />
			<batch:listeners>
				<batch:listener ref="markRelatedIdentifierRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processIdentifierDecider" id="processIdentifiersDecision">
			<batch:next on="true" to="processIdentifierFile" />
			<batch:next on="false" to="deleteAbsentIdentifiers" />
		</batch:decision>
		<batch:step id="processIdentifierFile">
			<batch:description>Process the extension file containing the identifiers</batch:description>
			<batch:tasklet>
				<batch:chunk reader="identifierReader" processor="identifierProcessor"	writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentIdentifiers" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="identifierFieldSetMapper" />
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="identifierProcessor" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentIdentifiers">
			<batch:description>Delete the identifiers which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
				<batch:chunk reader="deleteIdentifiersReader" writer="deletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkDistributionProcessingMode" />
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="distributionProcessingModeDecider" id="checkDistributionProcessingMode">
			<batch:next on="IMPORT_DISTRIBUTION" to="markDistributionRecords" />
			<batch:next on="IMPORT_DISTRIBUTION_DONT_DELETE_GLOBAL" to="markRelatedDistributionRecords" />
            <batch:next on="SKIP_DISTRIBUTION" to="checkMeasurementOrFactProcessingMode" />
            <batch:next on="SKIP_WITH_ERROR" to="checkMeasurementOrFactProcessingMode" />
		</batch:decision>
		<batch:step id="markDistributionRecords">
			<batch:description>Mark the distribution records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markDistributionRecordsTasklet" />
			<batch:next on="COMPLETED" to="processDistributionDecision" />
			<batch:listeners>
				<batch:listener ref="markDistributionRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markRelatedDistributionRecords">
			<batch:description>Mark the distribution records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markRelatedDistributionRecordsTasklet" />
			<batch:next on="COMPLETED" to="processDistributionDecision" />
			<batch:listeners>
				<batch:listener ref="markRelatedDistributionRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processDistributionDecider" id="processDistributionDecision">
			<batch:next on="true" to="processDistributionFile" />
			<batch:next on="false" to="deleteAbsentDistribution" />
		</batch:decision>
		<batch:step id="processDistributionFile">
			<batch:description>Process the extension file containing the distribution</batch:description>
			<batch:tasklet>
				<batch:chunk reader="distributionReader" processor="distributionProcessor" writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentDistribution" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="distributionFieldSetMapper" />
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="distributionProcessor" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentDistribution">
			<batch:description>Delete the distribution which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
				<batch:chunk reader="deleteDistributionReader" writer="deletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkMeasurementOrFactProcessingMode" />
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="measurementOrFactProcessingModeDecider" id="checkMeasurementOrFactProcessingMode">
			<batch:next on="IMPORT_MEASUREMENT_OR_FACT" to="markMeasurementOrFactRecords" />
			<batch:next on="IMPORT_MEASUREMENT_OR_FACT_DONT_DELETE_GLOBAL" to="markRelatedMeasurementOrFactRecords" />
            <batch:next on="SKIP_MEASUREMENT_OR_FACT" to="checkVernacularNameProcessingMode" />
            <batch:next on="SKIP_WITH_ERROR" to="checkVernacularNameProcessingMode" />
		</batch:decision>
		<batch:step id="markMeasurementOrFactRecords">
			<batch:description>Mark the measurement or fact records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markMeasurementOrFactRecordsTasklet" />
			<batch:next on="COMPLETED" to="processMeasurementOrFactDecision" />
			<batch:listeners>
				<batch:listener ref="markMeasurementOrFactRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markRelatedMeasurementOrFactRecords">
			<batch:description>Mark the measurement or fact records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markRelatedMeasurementOrFactRecordsTasklet" />
			<batch:next on="COMPLETED" to="processMeasurementOrFactDecision" />
			<batch:listeners>
				<batch:listener ref="markRelatedMeasurementOrFactRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processMeasurementOrFactDecider" id="processMeasurementOrFactDecision">
			<batch:next on="true" to="processMeasurementOrFactFile" />
			<batch:next on="false" to="deleteAbsentMeasurementOrFacts" />
		</batch:decision>
		<batch:step id="processMeasurementOrFactFile">
			<batch:description>Process the extension file containing the distribution</batch:description>
			<batch:tasklet>
				<batch:chunk reader="measurementOrFactReader" processor="measurementOrFactProcessor" writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentMeasurementOrFacts" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="measurementOrFactFieldSetMapper" />
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="measurementOrFactProcessor" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentMeasurementOrFacts">
			<batch:description>Delete the measurement or facts which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
				<batch:chunk reader="deleteMeasurementOrFactReader" writer="deletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkVernacularNameProcessingMode" />
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="vernacularNameProcessingModeDecider" id="checkVernacularNameProcessingMode">
			<batch:next on="IMPORT_VERNACULAR_NAME" to="markVernacularNameRecords" />
			<batch:next on="IMPORT_VERNACULAR_NAME_DONT_DELETE_GLOBAL" to="markRelatedVernacularNameRecords" />
            <batch:next on="SKIP_VERNACULAR_NAME" to="checkTypeAndSpecimenProcessingMode" />
            <batch:next on="SKIP_WITH_ERROR" to="checkTypeAndSpecimenProcessingMode" />
		</batch:decision>
		<batch:step id="markVernacularNameRecords">
			<batch:description>Mark the vernacular name records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markVernacularNameRecordsTasklet" />
			<batch:next on="COMPLETED" to="processVernacularNameDecision" />
			<batch:listeners>
				<batch:listener ref="markVernacularNameRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markRelatedVernacularNameRecords">
			<batch:description>Mark the vernacular name records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markRelatedVernacularNameRecordsTasklet" />
			<batch:next on="COMPLETED" to="processVernacularNameDecision" />
			<batch:listeners>
				<batch:listener ref="markRelatedVernacularNameRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processVernacularNameDecider" id="processVernacularNameDecision">
			<batch:next on="true" to="processVernacularNameFile" />
			<batch:next on="false" to="deleteAbsentVernacularNames" />
		</batch:decision>
		<batch:step id="processVernacularNameFile">
			<batch:description>Process the extension file containing the vernacular names</batch:description>
			<batch:tasklet>
				<batch:chunk reader="vernacularNameReader" processor="vernacularNameProcessor" writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentVernacularNames" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="vernacularNameFieldSetMapper" />
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="vernacularNameProcessor" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentVernacularNames">
			<batch:description>Delete the vernacular names which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
				<batch:chunk reader="deleteVernacularNameReader" writer="deletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="checkTypeAndSpecimenProcessingMode" />
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="typeAndSpecimenProcessingModeDecider" id="checkTypeAndSpecimenProcessingMode">
			<batch:next on="IMPORT_TYPE_AND_SPECIMEN" to="markTypeAndSpecimenRecords" />
			<batch:next on="IMPORT_TYPE_AND_SPECIMEN_DONT_DELETE_GLOBAL" to="markRelatedTypeAndSpecimenRecords" />
            <batch:next on="SKIP_TYPE_AND_SPECIMEN" to="calculateDerivedProperties" />
			<batch:next on="SKIP_WITH_ERROR" to="calculateDerivedProperties" />
		</batch:decision>
		<batch:step id="markTypeAndSpecimenRecords">
			<batch:description>Mark the type and specimen records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
			<batch:tasklet ref="markTypeAndSpecimenRecordsTasklet" />
			<batch:next on="COMPLETED" to="processTypeAndSpecimenDecision" />
			<batch:listeners>
				<batch:listener ref="markTypeAndSpecimenRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="markRelatedTypeAndSpecimenRecords">
			<batch:description>Mark the type and specimen records we expect to be present in this archive (based on what we have previously harvested) but don't delete specimens not related to a taxon</batch:description>
			<batch:tasklet ref="markRelatedTypeAndSpecimenRecordsTasklet" />
			<batch:next on="COMPLETED" to="processTypeAndSpecimenDecision" />
			<batch:listeners>
				<batch:listener ref="markRelatedTypeAndSpecimenRecordsTasklet" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processTypeAndSpecimenDecider" id="processTypeAndSpecimenDecision">
			<batch:next on="true" to="processTypeAndSpecimenFile" />
			<batch:next on="false" to="deleteAbsentTypeAndSpecimens" />
		</batch:decision>
		<batch:step id="processTypeAndSpecimenFile">
			<batch:description>Process the extension file containing types and specimens</batch:description>
			<batch:tasklet>
				<batch:chunk reader="typeAndSpecimenReader" processor="typeAndSpecimenProcessor" writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
						<batch:include class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentTypeAndSpecimens" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
				<batch:listener ref="typeAndSpecimenFieldSetMapper" />
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="typeAndSpecimenProcessor" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentTypeAndSpecimens">
			<batch:description>Delete the types and specimens which we expected to be present in the archive but which were absent</batch:description>
			<batch:tasklet>
				<batch:chunk reader="deleteTypeAndSpecimenReader" writer="deletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="indexTypesAndSpecimens" />
			<batch:listeners>
				<batch:listener ref="processingExceptionProcessListener" />
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="indexTypesAndSpecimens">
		  <batch:description>Index the types and specimens associated with this job</batch:description>
		  <batch:tasklet>
				<batch:chunk reader="indexTypesAndSpecimensReader" writer="indexTypesAndSpecimensWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="calculateDerivedProperties" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="calculateDerivedProperties">
			<batch:description>Calculate derived properties</batch:description>
			<batch:tasklet>
				<batch:chunk reader="indexTaxaReader" processor="calculateDerivedPropertiesProcessor" writer="itemWriter" commit-interval="10" />
			</batch:tasklet>			
			<batch:next on="COMPLETED" to="indexTaxa"/>
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="indexTaxa">
		  <batch:description>Index the taxa associated with this job</batch:description>
		  <batch:tasklet>
				<batch:chunk reader="indexTaxaReader" writer="indexTaxaWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="indexAnnotations" />	
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>		
		</batch:step>
		<batch:step id="indexAnnotations">
		  <batch:description>Index the annotations associated with this job</batch:description>
		  <batch:tasklet>
				<batch:chunk reader="indexAnnotationsReader" writer="indexAnnotationsWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteOldAnnotations" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>	
		</batch:step>
		<batch:step id="deleteOldAnnotations">
		    <batch:description>Delete the annotations no longer associated with this job</batch:description>
		    <batch:tasklet>
				<batch:chunk reader="deleteAnnotationsReader" writer="deletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="cleanupResources" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>	
		<batch:step id="cleanupResources">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="dwcArchiveResourceDeletingTasklet" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="indexAnnotationsFailed">
		  <batch:description>Index the annotations associated with this job, so that we can see the errors</batch:description>
		  <batch:tasklet>
				<batch:chunk reader="indexAnnotationsReader" writer="indexAnnotationsWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteOldAnnotationsFailed" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>	
		</batch:step>
		<batch:step id="deleteOldAnnotationsFailed">
		    <batch:description>Delete the annotations no longer associated with this job</batch:description>
		    <batch:tasklet>
				<batch:chunk reader="deleteAnnotationsReader" writer="deletingWriter" commit-interval="100" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="cleanupResourcesFailed" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="cleanupResourcesFailed">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="dwcArchiveResourceDeletingTasklet" />
			<batch:end on="COMPLETED" exit-code="FAILED" />
			<batch:listeners>
				<batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:listeners>
		    <batch:listener ref="compositeJobListener" />
		</batch:listeners>
	</batch:job>

	<bean id="setTemporaryFilenamesTasklet" class="org.emonocot.job.dwc.SetTemporaryFilenamesTasklet">
		<property name="harvesterSpoolDirectory" value="${harvester.spool.directory}" />
	</bean>

	<bean id="dwcArchiveResourceDeletingTasklet"
		class="org.emonocot.harvest.common.MultiResourceDeletingTasklet"
		scope="step">
		<property name="resources">
			<list>
				<bean class="org.springframework.core.io.FileSystemResource" scope="step">
					<constructor-arg value="#{jobExecutionContext['temporary.file.name']}" />
				</bean>
				<bean class="org.springframework.core.io.FileSystemResource" scope="step">
					<constructor-arg value="#{jobExecutionContext['unpack.directory.name']}" />
				</bean>
			</list>
		</property>
	</bean>

	<bean id="getDWCArchiveTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="getResourceClient" />
		<property name="targetMethod" value="getBinaryResource" />
		<property name="arguments">
			<list>
				<value>#{jobParameters['authority.uri']}</value>
				<value>#{jobParameters['authority.last.harvested']}</value>
				<value>#{jobExecutionContext['temporary.file.name']}</value>
			</list>
		</property>
	</bean>

	<bean id="unpackDWCArchiveTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="dwcArchiveUnpacker" />
		<property name="targetMethod" value="unpackArchive" />
		<property name="arguments">
			<list>
				<value>#{jobExecutionContext['temporary.file.name']}</value>
				<value>#{jobExecutionContext['unpack.directory.name']}</value>
			</list>
		</property>
	</bean>

	<bean id="dwcArchiveUnpacker" class="org.emonocot.job.dwc.read.ArchiveUnpacker" />

	<bean id="readDWCArchiveMetadataTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="dwcArchiveMetadataReader" />
		<property name="targetMethod" value="readMetadata" />
		<property name="arguments">
			<list>
				<value>#{jobExecutionContext['unpack.directory.name']}</value>
				<value>#{jobParameters['authority.name']}</value>
				<value>#{jobParameters['meta.errors.fail']}</value>
			</list>
		</property>
	</bean>

	<bean id="dwcArchiveMetadataReader" class="org.emonocot.job.dwc.read.ArchiveMetadataReader"/>

	<!-- Taxa -->

	<bean id="taxonProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="taxon.processing.mode" />
		<property name="defaultProcessingMode" value="CHECK_TAXA" />
	</bean>
	
	<bean id="markTaxonRecordsByAuthorityTasklet" class="org.emonocot.job.dwc.taxon.RecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>	
	</bean>
	
	<bean id="markTaxonRecordsForCheckingTasklet" class="org.emonocot.job.dwc.taxon.CheckingRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="family" value="#{jobParameters['family']}"/>
		<property name="subfamily" value="#{jobParameters['subfamily']}"/>
		<property name="tribe" value="#{jobParameters['tribe']}"/>
		<property name="subtribe" value="#{jobParameters['subtribe']}"/>
	</bean>

	<bean id="markTaxonRecordsForImportTasklet" class="org.emonocot.job.dwc.taxon.SubsetRecordAnnotator"	scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="family" value="#{jobParameters['family']}"/>
		<property name="subfamily" value="#{jobParameters['subfamily']}"/>
		<property name="tribe" value="#{jobParameters['tribe']}"/>
		<property name="subtribe" value="#{jobParameters['subtribe']}"/>
	</bean>
	
	<bean id="markTaxonRecordsForSkippingTasklet" class="org.emonocot.job.dwc.taxon.SkippingRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>	
	</bean>

	<bean id="taxonReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding" value="#{jobExecutionContext['dwca.core.encoding']}" />
		<property name="linesToSkip"
			value="#{jobExecutionContext['dwca.core.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.core.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="taxonLineMapper" />
	</bean>

	<bean id="taxonImportingProcessor" class="org.emonocot.job.dwc.taxon.Processor"	scope="step">
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
	</bean>
	
	<bean id="taxonSkippingProcessor" class="org.emonocot.job.dwc.taxon.SkippingProcessor" scope="step">
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
	</bean>

	<bean id="taxonCheckingProcessor" class="org.emonocot.job.dwc.taxon.CheckingProcessor" scope="step">
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
	</bean>

	<bean id="taxonLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="taxonLineTokenizer" />
		<property name="fieldSetMapper" ref="taxonFieldSetMapper" />
	</bean>

	<bean id="taxonLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names"
			value="#{jobExecutionContext['dwca.core.fieldNames']}" />
		<property name="delimiter"
			value="#{jobExecutionContext['dwca.core.fieldsTerminatedBy']}" />
		<property name="quoteCharacter"
			value="#{jobExecutionContext['dwca.core.fieldsEnclosedBy']}" />
		<property name="strict" value="false" />
	</bean>

	<bean id="taxonFieldSetMapper" class="org.emonocot.job.dwc.taxon.FieldSetMapper" scope="step">
		<property name="fieldNames"	value="#{jobExecutionContext['dwca.core.fieldNames']}" />
		<property name="defaultValues" value="#{jobExecutionContext['dwca.core.defaultValues']}" />
	</bean>
	
	<bean id="deleteTaxaReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select t.id from Taxon t join t.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code" value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>
	
	<bean id="calculateDerivedPropertiesProcessor" class="org.emonocot.job.dwc.taxon.CalculateDerivedPropertiesProcessor">
	  <property name="taxonService" ref="taxonServiceImpl"/>
	</bean>
	
	<bean id="indexTaxaReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select t.id from Taxon t join t.annotations a where a.jobId = :jobId" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
			</map>
		</property>
	</bean>
	
	<bean id="indexTaxaWriter"  class="org.emonocot.harvest.common.SolrIndexingWriter">
      <property name="type" value="org.emonocot.model.Taxon" />
      <property name="sessionFactory" ref="sessionFactory" />
      <property name="solrIndexingListener" ref="solrIndexingListener" />
    </bean>
    
    <bean id="indexAnnotationsReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString" value="select a.id from Annotation a where a.jobId = :jobId" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
			</map>
		</property>
	</bean>
    
    <bean id="indexAnnotationsWriter"  class="org.emonocot.harvest.common.SolrIndexingWriter">
      <property name="type" value="org.emonocot.model.Annotation" />
      <property name="sessionFactory" ref="sessionFactory" />
      <property name="solrIndexingListener" ref="solrIndexingListener" />
    </bean>
    
    <bean id="deleteAnnotationsReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString" value="select a from Annotation a join a.authority auth where a.jobId not in (select r.jobId from Resource r join r.organisation org where org.identifier = :authorityIdentifier) and auth.identifier = :authorityIdentifier" />
		<property name="parameterValues">
			<map>
			    <entry key="authorityIdentifier" value="#{jobParameters['authority.name']}"/>				
			</map>
		</property>
	</bean>

	<!-- Descriptions -->
	
	<bean id="descriptionProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="description.processing.mode" />
		<property name="defaultProcessingMode" value="IMPORT_DESCRIPTIONS_DONT_DELETE_GLOBAL" />
	</bean>

	<bean id="processDescriptionDecider" class="org.emonocot.job.dwc.ExtensionProcessingDecider">
		<property name="processingModeKey" value="dwca.description.file" />
	</bean>
	
	<bean id="markDescriptionRecordsTasklet" class="org.emonocot.job.dwc.read.OwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>		
		<property name="annotatedObjType" value="Description" />	
	</bean>

	<bean id="markRelatedDescriptionRecordsTasklet" class="org.emonocot.job.dwc.read.OwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="family" value="#{jobParameters['family']}"/>
		<property name="subfamily" value="#{jobParameters['subfamily']}"/>
		<property name="tribe" value="#{jobParameters['tribe']}"/>
		<property name="subtribe" value="#{jobParameters['subtribe']}"/>
		<property name="annotatedObjType" value="Description" />	
	</bean>

	<bean id="descriptionReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding"
			value="#{jobExecutionContext['dwca.description.encoding']}" />
		<property name="linesToSkip"
			value="#{jobExecutionContext['dwca.description.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.description.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="descriptionLineMapper" />
	</bean>

	<bean id="descriptionProcessor" class="org.emonocot.job.dwc.description.Processor" scope="step">
	<property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="family" value="#{jobParameters['family']}" />
		<property name="subfamily" value="#{jobParameters['subfamily']}" />
		<property name="tribe" value="#{jobParameters['tribe']}" />
		<property name="subtribe" value="#{jobParameters['subtribe']}" />
		<property name="descriptionService" ref="descriptionServiceImpl" />
		<property name="referenceService" ref="referenceServiceImpl" />
	</bean>

	<bean id="descriptionLineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="descriptionLineTokenizer" />
		<property name="fieldSetMapper" ref="descriptionFieldSetMapper" />
	</bean>

	<bean id="descriptionLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names"
			value="#{jobExecutionContext['dwca.description.fieldNames']}" />
		<property name="delimiter"
			value="#{jobExecutionContext['dwca.description.fieldsTerminatedBy']}" />
		<property name="quoteCharacter"
			value="#{jobExecutionContext['dwca.description.fieldsEnclosedBy']}" />
		<property name="strict" value="false" />
	</bean>

	<bean id="descriptionFieldSetMapper" class="org.emonocot.job.dwc.description.FieldSetMapper"
		scope="step">
		<property name="fieldNames"
			value="#{jobExecutionContext['dwca.description.fieldNames']}" />
		<property name="defaultValues"
			value="#{jobExecutionContext['dwca.description.defaultValues']}" />
		<property name="taxonService" ref="taxonServiceImpl" />
	</bean>

	<bean id="deleteDescriptionsReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select d from Description d join d.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code"
					value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>

	<!-- Images -->
	
	<bean id="imageProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="image.processing.mode" />
		<property name="defaultProcessingMode" value="IMPORT_IMAGES" />
	</bean>
	
	<bean id="processImageDecider" class="org.emonocot.job.dwc.ExtensionProcessingDecider">
		<property name="processingModeKey" value="dwca.image.file" />
	</bean>

	<bean id="markImageRecordsTasklet" class="org.emonocot.job.dwc.read.NonOwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="Image"/>
	</bean>
	
	<bean id="markRelatedImageRecordsTasklet" class="org.emonocot.job.dwc.read.NonOwnedSubsetRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="Image"/>
		<property name="queryString" value="insert into Annotation (annotatedObjId, annotatedObjType, jobId, dateTime, authority_id, type, code, recordType) select distinct o.id, :annotatedObjType, :jobId, now(), :authorityId, 'Warn', 'Absent', :annotatedObjType from Image o join Taxon_Image o_t on (o.id = o_t.images_id) join Taxon t on (o_t.Taxon_id = t.id) left join Taxon a on (t.acceptedNameUsage_id = a.id) where o.authority_id = :authorityId and (t.#subsetRank = :subsetValue or a.#subsetRank = :subsetValue)"/>
		<property name="family" value="#{jobParameters['family']}" />
        <property name="subfamily" value="#{jobParameters['subfamily']}" />
        <property name="tribe" value="#{jobParameters['tribe']}" />
        <property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>

	<bean id="imageReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding"
			value="#{jobExecutionContext['dwca.image.encoding']}" />
		<property name="linesToSkip"
			value="#{jobExecutionContext['dwca.image.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.image.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="imageLineMapper" />
	</bean>

	<bean id="imageProcessor" class="org.emonocot.job.dwc.image.Processor" scope="step">
	    <property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="family" value="#{jobParameters['family']}" />
		<property name="subfamily" value="#{jobParameters['subfamily']}" />
		<property name="tribe" value="#{jobParameters['tribe']}" />
		<property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>

	<bean id="imageLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="imageLineTokenizer" />
		<property name="fieldSetMapper" ref="imageFieldSetMapper" />
	</bean>

	<bean id="imageLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names"
			value="#{jobExecutionContext['dwca.image.fieldNames']}" />
		<property name="quoteCharacter"
			value="#{jobExecutionContext['dwca.image.fieldsEnclosedBy']}" />
		<property name="delimiter"
			value="#{jobExecutionContext['dwca.image.fieldsTerminatedBy']}" />
		<property name="strict" value="false" />
	</bean>

	<bean id="imageFieldSetMapper" class="org.emonocot.job.dwc.image.FieldSetMapper"
		scope="step">
		<property name="fieldNames"
			value="#{jobExecutionContext['dwca.image.fieldNames']}" />
		<property name="defaultValues"
			value="#{jobExecutionContext['dwca.image.defaultValues']}" />
		<property name="taxonService" ref="taxonServiceImpl" />		
	</bean>

	<bean id="processImageFilesReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select i from Image i join i.authority a where a.identifier = :authority" />
		<property name="parameterValues">
			<map>
				<entry key="authority" value="#{jobParameters['authority.name']}" />
			</map>
		</property>
	</bean>

	<bean id="processImageFilesProcessor"
		class="org.springframework.batch.item.support.CompositeItemProcessor">
		<property name="delegates">
			<list>
				<ref bean="imageFetchingProcessor" />
                <ref bean="imageResizer"/>
				<ref bean="imageThumbnailProcessor"/>
				<ref bean="imageMetadataProcessor" />
			</list>
		</property>
	</bean>

	<bean id="deleteImagesReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select i from Image i join i.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code"
					value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>
	
	<bean id="indexImagesReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select i.id from Image i join i.annotations a where a.jobId = :jobId" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
			</map>
		</property>
	</bean>
	
	<bean id="indexImagesWriter"  class="org.emonocot.harvest.common.SolrIndexingWriter" scope="step">
      <property name="type" value="org.emonocot.model.Image" />
      <property name="sessionFactory" ref="sessionFactory" />
      <property name="solrIndexingListener" ref="solrIndexingListener" />
    </bean>
    
    <!-- Identification Keys -->
	
	<bean id="keyProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="key.processing.mode" />
		<property name="defaultProcessingMode" value="SKIP_KEYS" /><!-- By default skip keys as the majority are configured and imported individually -->
	</bean>
	
	<bean id="processKeysDecider" class="org.emonocot.job.dwc.ExtensionProcessingDecider">
		<property name="processingModeKey" value="dwca.image.file" />
	</bean>

	<bean id="markKeyRecordsTasklet" class="org.emonocot.job.dwc.read.NonOwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="IdentificationKey"/>
	</bean>
	
	<bean id="markRelatedKeyRecordsTasklet" class="org.emonocot.job.dwc.read.NonOwnedSubsetRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="IdentificationKey"/>
		<property name="queryString" value="insert into Annotation (annotatedObjId, annotatedObjType, jobId, dateTime, authority_id, type, code, recordType) select distinct o.id, :annotatedObjType, :jobId, now(), :authorityId, 'Warn', 'Absent', :annotatedObjType from IdentificationKey o join Taxon_IdentificationKey o_t on (o.id = o_t.keys_id) join Taxon t on (o_t.Taxon_id = t.id) left join Taxon a on (t.acceptedNameUsage_id = a.id) where o.authority_id = :authorityId and (t.#subsetRank = :subsetValue or a.#subsetRank = :subsetValue)"/>
		<property name="family" value="#{jobParameters['family']}" />
        <property name="subfamily" value="#{jobParameters['subfamily']}" />
        <property name="tribe" value="#{jobParameters['tribe']}" />
        <property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>

	<bean id="keyReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding"
			value="#{jobExecutionContext['dwca.image.encoding']}" />
		<property name="linesToSkip"
			value="#{jobExecutionContext['dwca.image.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.image.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="imageLineMapper" /><!-- Re-use objects -->
	</bean>
	
	<bean id="keyProcessor" class="org.emonocot.job.dwc.key.JobLaunchingProcessor" scope="step">
	  <property name="processor" ref="keyProcessorDelegate"/>
      <property name="sourceName" value="#{jobParameters['authority.name']}" />
	</bean>

	<bean id="keyProcessorDelegate" class="org.emonocot.job.dwc.key.Processor" scope="step">
	    <property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="family" value="#{jobParameters['family']}" />
		<property name="subfamily" value="#{jobParameters['subfamily']}" />
		<property name="tribe" value="#{jobParameters['tribe']}" />
		<property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>


	<bean id="deleteKeysReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select i from IdentificationKey i join i.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code"
					value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>
	
	<bean id="indexKeysReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select i.id from IdentificationKey i join i.annotations a where a.jobId = :jobId" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
			</map>
		</property>
	</bean>
	
	<bean id="indexKeysWriter"  class="org.emonocot.harvest.common.SolrIndexingWriter" scope="step">
      <property name="type" value="org.emonocot.model.IdentificationKey" />
      <property name="sessionFactory" ref="sessionFactory" />
      <property name="solrIndexingListener" ref="solrIndexingListener" />
    </bean>
    
    <!-- Phylogenies -->
	
	<bean id="phylogenyProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="phylogeny.processing.mode" />
		<property name="defaultProcessingMode" value="SKIP_PHYLOGENIES" /><!-- By default skip phylogenies as the majority are configured and imported individually -->
	</bean>
	
	<bean id="processPhylogeniesDecider" class="org.emonocot.job.dwc.ExtensionProcessingDecider">
		<property name="processingModeKey" value="dwca.image.file" />
	</bean>

	<bean id="markPhylogenyRecordsTasklet" class="org.emonocot.job.dwc.read.NonOwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="PhylogeneticTree"/>
	</bean>
	
	<bean id="markRelatedPhylogenyRecordsTasklet" class="org.emonocot.job.dwc.read.NonOwnedSubsetRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="IdentificationKey"/>
		<property name="queryString" value="insert into Annotation (annotatedObjId, annotatedObjType, jobId, dateTime, authority_id, type, code, recordType) select distinct o.id, :annotatedObjType, :jobId, now(), :authorityId, 'Warn', 'Absent', :annotatedObjType from PhylogeneticTree o join Taxon_PhylogeneticTree o_t on (o.id = o_t.trees_id) join Taxon t on (o_t.Taxon_id = t.id) left join Taxon a on (t.acceptedNameUsage_id = a.id) where o.authority_id = :authorityId and (t.#subsetRank = :subsetValue or a.#subsetRank = :subsetValue)"/>
		<property name="family" value="#{jobParameters['family']}" />
        <property name="subfamily" value="#{jobParameters['subfamily']}" />
        <property name="tribe" value="#{jobParameters['tribe']}" />
        <property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>

	<bean id="phylogenyReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding"
			value="#{jobExecutionContext['dwca.image.encoding']}" />
		<property name="linesToSkip"
			value="#{jobExecutionContext['dwca.image.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.image.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="imageLineMapper" /><!-- Re-use objects -->
	</bean>
	
	<bean id="phylogenyProcessor" class="org.emonocot.job.dwc.phylo.JobLaunchingProcessor" scope="step">
	  <property name="processor" ref="phylogenyProcessorDelegate"/>
      <property name="sourceName" value="#{jobParameters['authority.name']}" />
	</bean>

	<bean id="phylogenyProcessorDelegate" class="org.emonocot.job.dwc.phylo.Processor" scope="step">
	    <property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="family" value="#{jobParameters['family']}" />
		<property name="subfamily" value="#{jobParameters['subfamily']}" />
		<property name="tribe" value="#{jobParameters['tribe']}" />
		<property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>


	<bean id="deletePhylogeniesReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select i from PhylogeneticTree i join i.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code"
					value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>
	
	<bean id="indexPhylogeniesReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select i.id from PhylogeneticTree i join i.annotations a where a.jobId = :jobId" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
			</map>
		</property>
	</bean>
	
	<bean id="indexPhylogeniesWriter"  class="org.emonocot.harvest.common.SolrIndexingWriter" scope="step">
      <property name="type" value="org.emonocot.model.PhylogeneticTree" />
      <property name="sessionFactory" ref="sessionFactory" />
      <property name="solrIndexingListener" ref="solrIndexingListener" />
    </bean>
    
    <!-- Terms -->
	
	<bean id="termProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="term.processing.mode" />
		<property name="defaultProcessingMode" value="IMPORT_TERMS" />
	</bean>
	
	<bean id="processTermsDecider" class="org.emonocot.job.dwc.ExtensionProcessingDecider">
		<property name="processingModeKey" value="dwca.term.file" />
	</bean>

	<bean id="markTermRecordsTasklet" class="org.emonocot.job.dwc.read.NonOwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="Concept"/>
	</bean>
	
	<bean id="markRelatedTermRecordsTasklet" class="org.emonocot.job.dwc.read.NonOwnedSubsetRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="Concept"/>
		<property name="queryString" value="insert into Annotation (annotatedObjId, annotatedObjType, jobId, dateTime, authority_id, type, code, recordType) select distinct o.id, :annotatedObjType, :jobId, now(), :authorityId, 'Warn', 'Absent', :annotatedObjType from Concept o join Taxon_Concept o_t on (o.id = o_t.terms_id) join Taxon t on (o_t.Taxon_id = t.id) left join Taxon a on (t.acceptedNameUsage_id = a.id) where o.authority_id = :authorityId and (t.#subsetRank = :subsetValue or a.#subsetRank = :subsetValue)"/>
		<property name="family" value="#{jobParameters['family']}" />
        <property name="subfamily" value="#{jobParameters['subfamily']}" />
        <property name="tribe" value="#{jobParameters['tribe']}" />
        <property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>

	<bean id="termReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding"
			value="#{jobExecutionContext['dwca.term.encoding']}" />
		<property name="linesToSkip"
			value="#{jobExecutionContext['dwca.term.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.term.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="termLineMapper" />
	</bean>

	<bean id="termProcessor" class="org.emonocot.job.dwc.concept.Processor" scope="step">
	    <property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="family" value="#{jobParameters['family']}" />
		<property name="subfamily" value="#{jobParameters['subfamily']}" />
		<property name="tribe" value="#{jobParameters['tribe']}" />
		<property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>

	<bean id="termLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="termLineTokenizer" />
		<property name="fieldSetMapper" ref="termFieldSetMapper" />
	</bean>

	<bean id="termLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names"
			value="#{jobExecutionContext['dwca.term.fieldNames']}" />
		<property name="quoteCharacter"
			value="#{jobExecutionContext['dwca.term.fieldsEnclosedBy']}" />
		<property name="delimiter"
			value="#{jobExecutionContext['dwca.term.fieldsTerminatedBy']}" />
		<property name="strict" value="false" />
	</bean>

	<bean id="termFieldSetMapper" class="org.emonocot.job.dwc.concept.FieldSetMapper"
		scope="step">
		<property name="fieldNames"
			value="#{jobExecutionContext['dwca.term.fieldNames']}" />
		<property name="defaultValues"
			value="#{jobExecutionContext['dwca.term.defaultValues']}" />
		<property name="taxonService" ref="taxonServiceImpl" />		
	</bean>

	<bean id="deleteTermsReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select i from Concept i join i.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code"
					value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>
	
	<bean id="indexTermsReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select i.id from Concept i join i.annotations a where a.jobId = :jobId" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
			</map>
		</property>
	</bean>
	
	<bean id="indexTermsWriter"  class="org.emonocot.harvest.common.SolrIndexingWriter" scope="step">
      <property name="type" value="org.emonocot.model.Concept" />
      <property name="sessionFactory" ref="sessionFactory" />
      <property name="solrIndexingListener" ref="solrIndexingListener" />
    </bean>

	<!-- References -->

	<bean id="markReferenceRecordsTasklet" class="org.emonocot.job.dwc.read.NonOwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="Reference"/>
	</bean>
	
	<bean id="markRelatedReferenceRecordsTasklet" class="org.emonocot.job.dwc.read.NonOwnedSubsetRecordAnnotator" scope="step">		
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="Reference"/>
		<property name="queryString" value="insert into Annotation (annotatedObjId, annotatedObjType, jobId, dateTime, authority_id, type, code, recordType) select distinct o.id, :annotatedObjType, :jobId, now(), :authorityId, 'Warn', 'Absent', :annotatedObjType from Reference o join Taxon_Reference o_t on (o.id = o_t.references_id) join Taxon t on (o_t.Taxon_id = t.id) left join Taxon a on (t.acceptedNameUsage_id = a.id) where o.authority_id = :authorityId and (t.#subsetRank = :subsetValue or a.#subsetRank = :subsetValue)"/>
		<property name="family" value="#{jobParameters['family']}" />
        <property name="subfamily" value="#{jobParameters['subfamily']}" />
        <property name="tribe" value="#{jobParameters['tribe']}" />
        <property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>
	
	<bean id="referenceProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="reference.processing.mode" />
		<property name="defaultProcessingMode" value="IMPORT_REFERENCES" />
	</bean>
	
	<bean id="processReferenceDecider" class="org.emonocot.job.dwc.ExtensionProcessingDecider">
		<property name="processingModeKey" value="dwca.reference.file" />
	</bean>

	<bean id="referenceReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding"
			value="#{jobExecutionContext['dwca.reference.encoding']}" />
		<property name="linesToSkip"
			value="#{jobExecutionContext['dwca.reference.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.reference.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="referenceLineMapper" />
	</bean>

	<bean id="referenceProcessor" class="org.emonocot.job.dwc.reference.Processor"
		scope="step">
		<property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="family" value="#{jobParameters['family']}" />
		<property name="subfamily" value="#{jobParameters['subfamily']}" />
		<property name="tribe" value="#{jobParameters['tribe']}" />
		<property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>

	<bean id="referenceLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="referenceLineTokenizer" />
		<property name="fieldSetMapper" ref="referenceFieldSetMapper" />
	</bean>

	<bean id="referenceLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names"
			value="#{jobExecutionContext['dwca.reference.fieldNames']}" />
		<property name="delimiter"
			value="#{jobExecutionContext['dwca.reference.fieldsTerminatedBy']}" />
		<property name="quoteCharacter"
			value="#{jobExecutionContext['dwca.reference.fieldsEnclosedBy']}" />
		<property name="strict" value="false" />
	</bean>

	<bean id="referenceFieldSetMapper" class="org.emonocot.job.dwc.reference.FieldSetMapper"
		scope="step">
		<property name="fieldNames"
			value="#{jobExecutionContext['dwca.reference.fieldNames']}" />
		<property name="defaultValues"
			value="#{jobExecutionContext['dwca.reference.defaultValues']}" />
		<property name="taxonService" ref="taxonServiceImpl" />
	</bean>

	<bean id="deleteReferencesReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select r from Reference r join r.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code"
					value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>

	<!-- Identifiers -->
	
	<bean id="markIdentifierRecordsTasklet"	class="org.emonocot.job.dwc.read.OwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="Identifier" />	
	</bean>

	<bean id="markRelatedIdentifierRecordsTasklet"	class="org.emonocot.job.dwc.read.OwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="family" value="#{jobParameters['family']}"/>
		<property name="subfamily" value="#{jobParameters['subfamily']}"/>
		<property name="tribe" value="#{jobParameters['tribe']}"/>
		<property name="subtribe" value="#{jobParameters['subtribe']}"/>
		<property name="annotatedObjType" value="Identifier" />	
	</bean>
	
	<bean id="identifierProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="identifier.processing.mode" />
		<property name="defaultProcessingMode" value="IMPORT_IDENTIFIERS_DONT_DELETE_GLOBAL" />
	</bean>
	
	<bean id="processIdentifierDecider" class="org.emonocot.job.dwc.ExtensionProcessingDecider">
		<property name="processingModeKey" value="dwca.identifier.file" />
	</bean>

	<bean id="identifierReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding"
			value="#{jobExecutionContext['dwca.identifier.encoding']}" />
		<property name="linesToSkip"
			value="#{jobExecutionContext['dwca.identifier.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.identifier.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="identifierLineMapper" />
	</bean>

	<bean id="identifierProcessor" class="org.emonocot.job.dwc.identifier.Processor"
		scope="step">
		<property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
		<property name="identifierService" ref="identifierServiceImpl" />
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="family" value="#{jobParameters['family']}" />
		<property name="subfamily" value="#{jobParameters['subfamily']}" />
		<property name="tribe" value="#{jobParameters['tribe']}" />
		<property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>

	<bean id="identifierLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="identifierLineTokenizer" />
		<property name="fieldSetMapper" ref="identifierFieldSetMapper" />
	</bean>

	<bean id="identifierLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names"
			value="#{jobExecutionContext['dwca.identifier.fieldNames']}" />
		<property name="delimiter"
			value="#{jobExecutionContext['dwca.identifier.fieldsTerminatedBy']}" />
		<property name="quoteCharacter"
			value="#{jobExecutionContext['dwca.identifier.fieldsEnclosedBy']}" />
		<property name="strict" value="false" />
	</bean>

	<bean id="identifierFieldSetMapper" class="org.emonocot.job.dwc.identifier.FieldSetMapper"
		scope="step">
		<property name="fieldNames"
			value="#{jobExecutionContext['dwca.identifier.fieldNames']}" />
		<property name="defaultValues"
			value="#{jobExecutionContext['dwca.identifier.defaultValues']}" />
		<property name="taxonService" ref="taxonServiceImpl" />		
	</bean>

	<bean id="deleteIdentifiersReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select i from Identifier i join i.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code" value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>
	
	<!-- Distribution -->
	
	<bean id="markDistributionRecordsTasklet" class="org.emonocot.job.dwc.read.OwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>		
		<property name="annotatedObjType" value="Distribution" />	
	</bean>

	<bean id="markRelatedDistributionRecordsTasklet" class="org.emonocot.job.dwc.read.OwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="family" value="#{jobParameters['family']}"/>
		<property name="subfamily" value="#{jobParameters['subfamily']}"/>
		<property name="tribe" value="#{jobParameters['tribe']}"/>
		<property name="subtribe" value="#{jobParameters['subtribe']}"/>
		<property name="annotatedObjType" value="Distribution" />	
	</bean>
	
	<bean id="distributionProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="distribution.processing.mode" />
		<property name="defaultProcessingMode" value="IMPORT_DISTRIBUTION_DONT_DELETE_GLOBAL" />
	</bean>
	
	<bean id="processDistributionDecider" class="org.emonocot.job.dwc.ExtensionProcessingDecider">
		<property name="processingModeKey" value="dwca.distribution.file" />
	</bean>

	<bean id="distributionReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding" value="#{jobExecutionContext['dwca.distribution.encoding']}" />
		<property name="linesToSkip" value="#{jobExecutionContext['dwca.distribution.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource" scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.distribution.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="distributionLineMapper" />
	</bean>

	<bean id="distributionProcessor" class="org.emonocot.job.dwc.distribution.Processor"
		scope="step">
		<property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
		<property name="distributionService" ref="distributionServiceImpl" />
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="family" value="#{jobParameters['family']}" />
		<property name="subfamily" value="#{jobParameters['subfamily']}" />
		<property name="tribe" value="#{jobParameters['tribe']}" />
		<property name="subtribe" value="#{jobParameters['subtribe']}" />
		<property name="referenceService" ref="referenceServiceImpl"/>
	</bean>

	<bean id="distributionLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="distributionLineTokenizer" />
		<property name="fieldSetMapper" ref="distributionFieldSetMapper" />
	</bean>

	<bean id="distributionLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names"
			value="#{jobExecutionContext['dwca.distribution.fieldNames']}" />
		<property name="delimiter"
			value="#{jobExecutionContext['dwca.distribution.fieldsTerminatedBy']}" />
		<property name="quoteCharacter"
			value="#{jobExecutionContext['dwca.distribution.fieldsEnclosedBy']}" />
		<property name="strict" value="false" />
	</bean>

	<bean id="distributionFieldSetMapper" class="org.emonocot.job.dwc.distribution.FieldSetMapper"
		scope="step">
		<property name="fieldNames"
			value="#{jobExecutionContext['dwca.distribution.fieldNames']}" />
		<property name="defaultValues"
			value="#{jobExecutionContext['dwca.distribution.defaultValues']}" />
		<property name="taxonService" ref="taxonServiceImpl" />
	</bean>

	<bean id="deleteDistributionReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString" value="select d from Distribution d join d.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code" value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>
	
	<!-- MeasurementOrFact -->
	
	<bean id="markMeasurementOrFactRecordsTasklet" class="org.emonocot.job.dwc.read.OwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>		
		<property name="annotatedObjType" value="MeasurementOrFact" />		
	</bean>

	<bean id="markRelatedMeasurementOrFactRecordsTasklet" class="org.emonocot.job.dwc.read.OwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="family" value="#{jobParameters['family']}"/>
		<property name="subfamily" value="#{jobParameters['subfamily']}"/>
		<property name="tribe" value="#{jobParameters['tribe']}"/>
		<property name="subtribe" value="#{jobParameters['subtribe']}"/>
		<property name="annotatedObjType" value="MeasurementOrFact" />		
	</bean>
	
	<bean id="measurementOrFactProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="measurementOrFact.processing.mode" />
		<property name="defaultProcessingMode" value="IMPORT_MEASUREMENT_OR_FACT_DONT_DELETE_GLOBAL" />
	</bean>
	
	<bean id="processMeasurementOrFactDecider" class="org.emonocot.job.dwc.ExtensionProcessingDecider">
		<property name="processingModeKey" value="dwca.measurementOrFact.file" />
	</bean>

	<bean id="measurementOrFactReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding"
			value="#{jobExecutionContext['dwca.measurementOrFact.encoding']}" />
		<property name="linesToSkip"
			value="#{jobExecutionContext['dwca.measurementOrFact.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.measurementOrFact.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="measurementOrFactLineMapper" />
	</bean>

	<bean id="measurementOrFactProcessor" class="org.emonocot.job.dwc.measurementorfact.Processor"	scope="step">
	    <property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
		<property name="measurementOrFactService" ref="measurementOrFactServiceImpl" />
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="family" value="#{jobParameters['family']}" />
		<property name="subfamily" value="#{jobParameters['subfamily']}" />
		<property name="tribe" value="#{jobParameters['tribe']}" />
		<property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>

	<bean id="measurementOrFactLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="measurementOrFactLineTokenizer" />
		<property name="fieldSetMapper" ref="measurementOrFactFieldSetMapper" />
	</bean>

	<bean id="measurementOrFactLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names"
			value="#{jobExecutionContext['dwca.measurementOrFact.fieldNames']}" />
		<property name="delimiter"
			value="#{jobExecutionContext['dwca.measurementOrFact.fieldsTerminatedBy']}" />
		<property name="quoteCharacter"
			value="#{jobExecutionContext['dwca.measurementOrFact.fieldsEnclosedBy']}" />
		<property name="strict" value="false" />
	</bean>

	<bean id="measurementOrFactFieldSetMapper" class="org.emonocot.job.dwc.measurementorfact.FieldSetMapper"
		scope="step">
		<property name="fieldNames"
			value="#{jobExecutionContext['dwca.measurementOrFact.fieldNames']}" />
		<property name="defaultValues"
			value="#{jobExecutionContext['dwca.measurementOrFact.defaultValues']}" />
		<property name="taxonService" ref="taxonServiceImpl" />
	</bean>

	<bean id="deleteMeasurementOrFactReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select m from MeasurementOrFact m join m.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code"
					value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>
	
	<!-- VernacularName -->
	<bean id="markVernacularNameRecordsTasklet"	class="org.emonocot.job.dwc.read.OwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>		
		<property name="annotatedObjType" value="VernacularName" />		
	</bean>

	<bean id="markRelatedVernacularNameRecordsTasklet"	class="org.emonocot.job.dwc.read.OwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="family" value="#{jobParameters['family']}"/>
		<property name="subfamily" value="#{jobParameters['subfamily']}"/>
		<property name="tribe" value="#{jobParameters['tribe']}"/>
		<property name="subtribe" value="#{jobParameters['subtribe']}"/>
		<property name="annotatedObjType" value="VernacularName" />		
	</bean>
	
	<bean id="vernacularNameProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="vernacularName.processing.mode" />
		<property name="defaultProcessingMode" value="IMPORT_VERNACULAR_NAME_DONT_DELETE_GLOBAL" />
	</bean>
	
	<bean id="processVernacularNameDecider" class="org.emonocot.job.dwc.ExtensionProcessingDecider">
		<property name="processingModeKey" value="dwca.vernacularName.file" />
	</bean>

	<bean id="vernacularNameReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding"
			value="#{jobExecutionContext['dwca.vernacularName.encoding']}" />
		<property name="linesToSkip"
			value="#{jobExecutionContext['dwca.vernacularName.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.vernacularName.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="vernacularNameLineMapper" />
	</bean>

	<bean id="vernacularNameProcessor" class="org.emonocot.job.dwc.vernacularname.Processor" scope="step">
	    <property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
		<property name="vernacularNameService" ref="vernacularNameServiceImpl" />
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="family" value="#{jobParameters['family']}" />
		<property name="subfamily" value="#{jobParameters['subfamily']}" />
		<property name="tribe" value="#{jobParameters['tribe']}" />
		<property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>

	<bean id="vernacularNameLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="vernacularNameLineTokenizer" />
		<property name="fieldSetMapper" ref="vernacularNameFieldSetMapper" />
	</bean>

	<bean id="vernacularNameLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names"
			value="#{jobExecutionContext['dwca.vernacularName.fieldNames']}" />
		<property name="delimiter"
			value="#{jobExecutionContext['dwca.vernacularName.fieldsTerminatedBy']}" />
		<property name="quoteCharacter"
			value="#{jobExecutionContext['dwca.vernacularName.fieldsEnclosedBy']}" />
		<property name="strict" value="false" />
	</bean>

	<bean id="vernacularNameFieldSetMapper" class="org.emonocot.job.dwc.vernacularname.FieldSetMapper"
		scope="step">
		<property name="fieldNames"
			value="#{jobExecutionContext['dwca.vernacularName.fieldNames']}" />
		<property name="defaultValues"
			value="#{jobExecutionContext['dwca.vernacularName.defaultValues']}" />
		<property name="taxonService" ref="taxonServiceImpl" />
	</bean>

	<bean id="deleteVernacularNameReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select v from VernacularName v join v.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code"
					value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>
	
	<!-- TypeAndSpecimen -->

	<bean id="markTypeAndSpecimenRecordsTasklet" class="org.emonocot.job.dwc.read.NonOwnedRecordAnnotator" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="TypeAndSpecimen"/>
	</bean>
	
	<bean id="markRelatedTypeAndSpecimenRecordsTasklet"	class="org.emonocot.job.dwc.read.NonOwnedSubsetRecordAnnotator"	scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="authorityName" value="#{jobParameters['authority.name']}"/>
		<property name="annotatedObjType" value="TypeAndSpecimen"/>
		<property name="queryString" value="insert into Annotation (annotatedObjId, annotatedObjType, jobId, dateTime, authority_id, type, code, recordType) select distinct o.id, :annotatedObjType, :jobId, now(), :authorityId, 'Warn', 'Absent', :annotatedObjType from TypeAndSpecimen o join Taxon_TypeAndSpecimen o_t on (o.id = o_t.typesAndSpecimens_id) join Taxon t on (o_t.Taxon_id = t.id) left join Taxon a on (t.acceptedNameUsage_id = a.id) where o.authority_id = :authorityId and (t.#subsetRank = :subsetValue or a.#subsetRank = :subsetValue)"/>
		<property name="family" value="#{jobParameters['family']}" />
        <property name="subfamily" value="#{jobParameters['subfamily']}" />
        <property name="tribe" value="#{jobParameters['tribe']}" />
        <property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>
	
	<bean id="typeAndSpecimenProcessingModeDecider" class="org.emonocot.job.ConfigurableProcessingModeDecider">
		<property name="processingModeKey" value="typeAndSpecimen.processing.mode" />
		<property name="defaultProcessingMode" value="IMPORT_TYPE_AND_SPECIMEN" />
	</bean>
	
	<bean id="processTypeAndSpecimenDecider" class="org.emonocot.job.dwc.ExtensionProcessingDecider">
		<property name="processingModeKey" value="dwca.typeAndSpecimen.file" />
	</bean>

	<bean id="typeAndSpecimenReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding"
			value="#{jobExecutionContext['dwca.typeAndSpecimen.encoding']}" />
		<property name="linesToSkip"
			value="#{jobExecutionContext['dwca.typeAndSpecimen.ignoreHeaderLines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.typeAndSpecimen.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="typeAndSpecimenLineMapper" />
	</bean>

	<bean id="typeAndSpecimenProcessor" class="org.emonocot.job.dwc.typeandspecimen.Processor" scope="step">
	    <property name="skipUnmodified" value="#{jobParameters['skip.unmodified']}"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="family" value="#{jobParameters['family']}" />
		<property name="subfamily" value="#{jobParameters['subfamily']}" />
		<property name="tribe" value="#{jobParameters['tribe']}" />
		<property name="subtribe" value="#{jobParameters['subtribe']}" />
	</bean>

	<bean id="typeAndSpecimenLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="typeAndSpecimenLineTokenizer" />
		<property name="fieldSetMapper" ref="typeAndSpecimenFieldSetMapper" />
	</bean>

	<bean id="typeAndSpecimenLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names"
			value="#{jobExecutionContext['dwca.typeAndSpecimen.fieldNames']}" />
		<property name="delimiter"
			value="#{jobExecutionContext['dwca.typeAndSpecimen.fieldsTerminatedBy']}" />
		<property name="quoteCharacter"
			value="#{jobExecutionContext['dwca.typeAndSpecimen.fieldsEnclosedBy']}" />
		<property name="strict" value="false" />
	</bean>

	<bean id="typeAndSpecimenFieldSetMapper" class="org.emonocot.job.dwc.typeandspecimen.FieldSetMapper"
		scope="step">
		<property name="fieldNames"
			value="#{jobExecutionContext['dwca.typeAndSpecimen.fieldNames']}" />
		<property name="defaultValues"
			value="#{jobExecutionContext['dwca.typeAndSpecimen.defaultValues']}" />
		<property name="taxonService" ref="taxonServiceImpl" />
	</bean>

	<bean id="deleteTypeAndSpecimenReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select t from TypeAndSpecimen t join t.annotations a where a.jobId = :jobId and a.code = :code" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
				<entry key="code"
					value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
			</map>
		</property>
	</bean>
	
	<bean id="indexTypesAndSpecimensReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString"
			value="select i.id from TypeAndSpecimen i join i.annotations a where a.jobId = :jobId" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
			</map>
		</property>
	</bean>
	
	<bean id="indexTypesAndSpecimensWriter"  class="org.emonocot.harvest.common.SolrIndexingWriter" scope="step">
      <property name="type" value="org.emonocot.model.TypeAndSpecimen" />
      <property name="sessionFactory" ref="sessionFactory" />
      <property name="solrIndexingListener" ref="solrIndexingListener" />
    </bean>

	<!-- Writing -->
    <bean id="imageDeletingWriter" class="org.springframework.batch.item.support.CompositeItemWriter">
        <property name="delegates">
            <list>
                <ref local="deletingWriter"/>
                <bean id="imageResourceDeletingWriter" class="org.emonocot.job.dwc.image.ImageFileDeletingWriter">
                    <property name="imageDirectory" value="${harvester.image.directory}"/>
                </bean>
            </list>
        </property>
    </bean>
	<bean id="processingExceptionProcessListener"
		class="org.emonocot.job.dwc.DwCProcessingExceptionProcessListener"
		scope="step">
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<bean id="itemWriter" class="org.springframework.batch.item.database.HibernateItemWriter">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="deletingWriter" class="org.emonocot.harvest.common.HibernateDeletingWriter">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="taxonDeletingWriter" class="org.emonocot.job.dwc.taxon.TaxonDeletingWriter">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

</beans>
